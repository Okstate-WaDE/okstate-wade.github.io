# -*- coding: utf-8 -*-
"""lugert_altus_data_analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19cJctZW4gTtibeny7mQhkef_0WIvefjz
"""

# prompt: load in the ALTU_ALL file

import pandas as pd

# Replace 'path/to/ALTU_ALL.csv' with the actual path to your file
file_path = 'ALTU_ALL.csv'

try:
    df_altu = pd.read_csv(file_path)
    print("ALTU_ALL file loaded successfully.")
    print(df_altu.head()) # Display the first few rows
except FileNotFoundError:
    print(f"Error: The file '{file_path}' was not found.")
except Exception as e:
    print(f"An error occurred: {e}")

# prompt: make a datetime column in the altu dataframe from the day month and year columns. the month columns is the abbreviated text (e.g., "JAN")
df_altu['Date'] = pd.to_datetime(df_altu['month'] + ' ' + df_altu['day'].astype(str) + ', ' + df_altu['year'].astype(str), format='%b %d, %Y')

df_altu = df_altu.set_index('Date')

df_altu.columns

df_95 = df_altu.loc['1995']

ax = df_95['storage (2400hr)'].plot(grid=True, figsize=(10, 5))

#df_altu.loc['1995']['rainfall inches (7A to BSN)'].plot.bar(ax=ax)

import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import numpy as np

fig, ax = plt.subplots(figsize=(10, 5))
ax.plot(df_95.index, df_95['storage (2400hr)'], label='Storage', color='blue')
ax.grid()

ax.xaxis.set_major_locator(mdates.MonthLocator(bymonthday=1))
ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %d'))

ax2 = ax.twinx()



# Add bar plot to same axes
ax2.bar(df_95.index, df_95['rainfall inches (7A to BSN)'], label='Rainfall', color='green', alpha=0.7, width=1)

ax.set_yticks(np.linspace(20000, 160000, 8))
ax2.set_yticks(np.linspace(0, 3.5, 8))


ax.set_ylabel('Reservoir Storage')
ax2.set_ylabel('Rainfall (inches)')

release_color = 'orange'
ax3 = ax.twinx()
ax3.spines["right"].set_position(("axes", 1.1))  # Offset this axis
ax3.bar(df_95.index, df_95['releases (total)'], color=release_color, alpha=0.5, width=1, label='Releases (Top Down)')
ax3.set_ylabel('Releases', color=release_color)
ax3.tick_params(axis='y', labelcolor=release_color)

ax3.set_yticks(np.linspace(0, 7000, 8))
ax3.set_ylim(0, 7000)

ax3.invert_yaxis()

# Get handles and labels from both axes
line_handles, line_labels = ax.get_legend_handles_labels()
bar_handles, bar_labels = ax2.get_legend_handles_labels()
release_handles, release_labels = ax3.get_legend_handles_labels()

# Combine them
all_handles = line_handles + bar_handles + release_handles
all_labels = line_labels + bar_labels + release_labels

# Add legend to ax1 (or ax2 if you prefer)
ax.legend(all_handles, all_labels, loc='upper left')

plt.title('Reservoir Storage and Rainfall at Lake Lugert Altus, 1995')
plt.show()



fig, ax = plt.subplots(figsize=(10, 5))
ax.plot(df_95.index, df_95['inflow adj'], label='Inflow', color='orange', alpha=0.7)
ax.grid()

ax.xaxis.set_major_locator(mdates.MonthLocator(bymonthday=1))
ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %d'))

ax2 = ax.twinx()



# Add bar plot to same axes
ax2.bar(df_95.index, df_95['rainfall inches (7A to BSN)'], label='Rainfall', color='green', alpha=0.5, width=1)
#ax2.bar(df_95.index, df_95['releases (total)'], label='Rainfall', color='green', alpha=0.5, width=1)

ax.set_yticks(np.linspace(0, 16000, 8))
# ax2.set_yticks(np.linspace(0, 3.5, 8))
ax.set_ylim(0, 16000)
# ax2.set_ylim(0, 3.5)

ax.set_ylabel('Reservoir Inflow')
ax2.set_ylabel('Rainfall (inches)')

# Get handles and labels from both axes
line_handles, line_labels = ax.get_legend_handles_labels()
bar_handles, bar_labels = ax2.get_legend_handles_labels()

# Combine them
all_handles = line_handles + bar_handles
all_labels = line_labels + bar_labels

# Add legend to ax1 (or ax2 if you prefer)
ax.legend(all_handles, all_labels, loc='upper left')

plt.title('Reservoir Inflow and Rainfall at Lake Lugert Altus, 1995')
plt.show()



df_aug = df_95.loc['1995-08']

df_aug

total_inflow = df_aug['inflow adj'].sum() * 24 * 3600 / 43560

delta_s = df_aug.iloc[-1, 4] - df_aug.iloc[0, 4]

delta_s

total_inflow

total_release = df_aug['releases (total)'].sum()

total_release

base_elevation = 1471.81

df_aug['depth'] = df_aug['elevations (ft)'] - base_elevation

df_aug['SA'] = df_aug['storage (2400hr)']/df_aug['depth']

df_aug

df_aug['evap_loss'] = df_aug['SA'] * df_aug['evap inches'] / 12

df_aug['evap_loss'].plot()

df_aug['evap_loss'].sum()

df_altu.plot.scatter(x='storage (2400hr)', y='pool')

df_altu['pool'] = df_altu['pool'].where(df_altu['pool'] > 1400)

new_var = df_altu.plot.scatter(x='storage (2400hr)', y='pool', alpha=0.5, grid=True)

df_altu['storage (2400hr)'].sort_values()

df_altu['storage (2400hr)'] = df_altu['storage (2400hr)'].where(df_altu['storage (2400hr)'] > 10)
df_altu['storage (2400hr)'] = df_altu['storage (2400hr)'].where(df_altu['storage (2400hr)'] < 160000)

df_altu['pool'].sort_values(ascending=False)

df_altu['storage (2400hr)'].loc['2003'].plot()

df_altu.sort_index()['storage (2400hr)'].plot(grid=True, figsize=(10, 4))

# prompt: average annual rainfall from df_altu

# Calculate the average annual rainfall
annual_rainfall = df_altu.groupby(df_altu.index.year)['rainfall inches (7A to BSN)'].sum()

ax = annual_rainfall.plot.bar(figsize=(10, 4))
ax.grid(axis='y')

df_altu

# @title elevations (ft) vs storage (2400hr)

from matplotlib import pyplot as plt
df_altu.plot(kind='scatter', x='elevations (ft)', y='storage (2400hr)', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

# prompt: make me a scatter plot with the pool and the storage. color the points by year

import matplotlib.pyplot as plt
# Make a scatter plot of 'storage (2400hr)' vs 'pool', colored by 'year'
fig, ax = plt.subplots(figsize=(10, 6))

scatter = ax.scatter(df_altu['storage (2400hr)'], df_altu['pool'],
                     c=df_altu['year'], cmap='viridis', alpha=0.7, s=1)

# Add a colorbar to show the year mapping
cbar = fig.colorbar(scatter)
cbar.set_label('Year')

ax.set_xlabel('Storage (2400hr)')
ax.set_ylabel('Pool')
ax.set_title('Storage vs Pool, Colored by Year')
ax.grid(True)
plt.show()

